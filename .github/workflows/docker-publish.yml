name: Build & Publish Multi-Arch Docker Image

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check_pr:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.pr_info.outputs.skip_build }}
    steps:
      - name: Get PR info
        id: pr_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }}/pulls --jq '.[0].title')
          if [[ "$PR_TITLE" == *"[skip_build]"* ]]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

  check_skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: skip_check
        run: |
          if git log -1 --pretty=%B | grep -q "\[skip_build\]"; then
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_skip=false" >> "$GITHUB_OUTPUT"
          fi

  tag:
    needs: check_pr
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    outputs:
      repo_version: ${{ steps.version.outputs.repo_version }}
      docker_version: ${{ steps.version.outputs.docker_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          # Source versions from versions.env
          source .dev/versions.env
          
          # Generate Docker image version
          DOCKER_VERSION="${UHF_VERSION}-ffmpeg${FFMPEG_VERSION}"
          
          echo "repo_version=$REPO_VERSION" >> $GITHUB_OUTPUT
          echo "docker_version=$DOCKER_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create and push tag
        run: |
          if [ "${{ steps.version.outputs.repo_version }}" != "latest" ]; then
            git tag -f "v${{ steps.version.outputs.repo_version }}"
            git push origin "v${{ steps.version.outputs.repo_version }}" --force
          fi

  docker:
    needs: [check_pr, check_skip, tag]
    if: |
      needs.check_pr.outputs.skip_build != 'true' &&
      needs.check_skip.outputs.should_skip != 'true' &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          # Source versions from versions.env
          source .dev/versions.env
          
          # Generate Docker image version
          DOCKER_VERSION="${UHF_VERSION}-ffmpeg${FFMPEG_VERSION}"
          echo "docker_version=$DOCKER_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.uhf
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            solidpixel/uhf-server:latest
            solidpixel/uhf-server:${{ steps.version.outputs.docker_version }}
          build-args: |
            UHF_VERSION=${{ env.UHF_VERSION }}
            FFMPEG_VERSION=${{ env.FFMPEG_VERSION }}
